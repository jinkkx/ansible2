
---
- hosts: localhost  # Replace with your EC2 instance group or hostname
  gather_facts: no 
  vars:
    aws_region: "us-east-1"  # Specify your AWS region here

  collections:
    - amazon.aws  # Include the amazon.aws collection

  tasks:

    - name: Get EC2 instance facts
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
      register: ec2_instance_info

    - name: Identify device name for attached volume
      ansible.builtin.set_fact:
        device_name: "{{ '/dev/nvme' ~ (item.instance_type | regex_replace('^(t[34]).*$', '\\1', capture=1) | int + 1) }}"
      when: item.instance_type is search('^(t3|t4).*$')
      loop: "{{ ec2_instance_info.instances }}"

    - name: Identify device name for attached volume (Legacy instances)
      ansible.builtin.set_fact:
        device_name: "/dev/sdd{{ ec2_instance_info.instances[0].block_device_mappings | length }}"
      when: not ec2_instance_info.instances[0].instance_type is search('^(t3|t4).*$')

    - name: Create mount point directory
      ansible.builtin.file:
        path: /home/ubuntu/jinkx
        state: directory
        mode: '0755'

    - name: Format the volume (if needed)
      ansible.builtin.shell:
        cmd: "sudo mkfs.ext2 /dev/xvdd"
        creates: "/dev/xvdd"
      when: device_name is defined and device_name not in (ec2_instance_info.instances[0].block_device_mappings | map(attribute='device_name') | list) 

    - name: Check filesystem status
      ansible.builtin.shell:
        cmd: "sudo file -s /dev/xvdd"
      register: filesystem_check

    - name: Format the volume if it's unformatted
      ansible.builtin.shell:
        cmd: "sudo mkfs.ext2 /dev/xvdd"

    - name: Mount the volume
      ansible.builtin.mount:
        path: /home/ubuntu/jinkx
        src: "/dev/xvdd"
        fstype: ext2
        state: mounted
        opts: defaults
      become: yes
